{
  "_id": "{{@ system @}}",
  "oauth2": {
    "access_token": "$SECRET(oauth_access_token)",
    "client_id": "$SECRET(oauth_client_id)",
    "client_secret": "$SECRET(oauth_client_secret)",
    "refresh_token": "$SECRET(oauth_refresh_token)",
    "token_url": "{{@ token_url @}}"
  },
  "operations": {
    "account-delete": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "mutation($input: AccountArchiveInput!) { accountArchive(input: $input) { didSucceed inputErrors { code message path } } }",
        "variables": {
          "input": {
            "id": "{{ entity.id }}"
          }
        }
      },
      "url": ""
    },
    "account-insert": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "mutation ($input: AccountCreateInput!){ accountCreate(input:$input) { didSucceed inputErrors { code message path } account { id name business { id } } } }",
        "variables": {
          "input": "{{ entity.payload2 | tojson }}sesam:markjson"
        }
      },
      "payload_property": "data.accountCreate.account",
      "url": ""
    },
    "account-list": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "headers": {
        "X-Sesam-Page": "{% if (previous_request_headers is defined and previous_request_headers['X-Sesam-Page'] is defined) %}{{ [previous_request_headers['X-Sesam-Page']|int + 1, 2] | max }}{% else %}1{% endif %}"
      },
      "id_expression": "{{ node.id }}",
      "method": "POST",
      "payload": {
        "query": "query($business_id: ID!, $page: Int!, $pageSize: Int!) {  business(id: $business_id) { id accounts (page: $page, pageSize: $pageSize) { edges { node { id classicId name description displayId currency { code symbol name plural exponent } type { name normalBalanceType value } subtype { name value description } normalBalanceType sequence isArchived balance balanceInBusinessCurrency } } } } }",
        "variables": {
          "business_id": "{{@ account_id @}}",
          "page": "{{ headers['X-Sesam-Page'] }}sesam:markjson",
          "pageSize": 200
        }
      },
      "payload_property": "data.business.accounts.edges",
      "url": ""
    },
    "account-lookup": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "query($businessId: ID!, $accountId: ID!) { business(id: $businessId) { id account(id: $accountId) { id classicId name description displayId currency { code symbol name plural exponent } type { name normalBalanceType value } subtype { name value description } normalBalanceType sequence isArchived balance balanceInBusinessCurrency } } } ",
        "variables": {
          "accountId": "{{ entity.id }}",
          "businessId": "{{@ account_id @}}"
        }
      },
      "payload_property": "data.business.account",
      "url": ""
    },
    "account-update": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "mutation ($input: AccountPatchInput!){ accountPatch(input:$input) { didSucceed inputErrors { code message path } account { id name business { id } } } }",
        "variables": {
          "input": "{{ entity.payload2 | tojson }}sesam:markjson"
        }
      },
      "url": ""
    },
    "business-list": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "headers": {
        "X-Sesam-Page": "{% if (previous_request_headers is defined and previous_request_headers['X-Sesam-Page'] is defined) %}{{ [previous_request_headers['X-Sesam-Page']|int + 1, 2] | max }}{% else %}1{% endif %}"
      },
      "id_expression": "{{ node.id }}",
      "method": "POST",
      "payload": {
        "query": "query($page: Int!, $pageSize: Int!) { businesses(page: $page, pageSize: $pageSize) { pageInfo { currentPage totalPages totalCount } edges { node { id name isPersonal organizationalType type { name value } subtype { name value } currency { code } timezone address { addressLine1 addressLine2 city province { code name } country { code name currency { code symbol name plural exponent } nameWithArticle } postalCode } phone fax mobile tollFree website isClassicAccounting isArchived createdAt modifiedAt salesTaxes { edges { node { id } } } invoiceEstimateSettings { generalSettings { accentColor logoUrl } } } } } }",
        "variables": {
          "page": "{{ headers['X-Sesam-Page'] }}sesam:markjson",
          "pageSize": 2
        }
      },
      "payload_property": "data.businesses.edges",
      "url": ""
    },
    "country-list": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "id_expression": "{{ code }}",
      "method": "POST",
      "payload": {
        "query": "query {  countries {  code name nameWithArticle currency { code } provinces { code name } } }",
        "variables": {}
      },
      "payload_property": "data.countries",
      "url": ""
    },
    "currency-list": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "id_expression": "{{ code }}",
      "method": "POST",
      "payload": {
        "query": "query {  currencies {  code symbol name plural exponent } }",
        "variables": {}
      },
      "payload_property": "data.currencies",
      "url": ""
    },
    "customer-delete": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "mutation ($input: CustomerDeleteInput!) { customerDelete(input: $input) { didSucceed inputErrors { code message path } }}",
        "variables": {
          "input": {
            "id": "{{ entity.id }}"
          }
        }
      },
      "url": ""
    },
    "customer-insert": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "mutation ($input: CustomerCreateInput!) { customerCreate(input: $input) { didSucceed inputErrors { code message path } customer { id } }}",
        "variables": {
          "input": "{{ entity.payload2 | tojson }}sesam:markjson"
        }
      },
      "payload_property": "data.customerCreate.customer",
      "url": ""
    },
    "customer-list": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "headers": {
        "X-Sesam-Page": "{% if (previous_request_headers is defined and previous_request_headers['X-Sesam-Page'] is defined) %}{{ [previous_request_headers['X-Sesam-Page']|int + 1, 2] | max }}{% else %}1{% endif %}"
      },
      "id_expression": "{{ node.id }}",
      "method": "POST",
      "payload": {
        "query": "query($business_id: ID!, $page: Int!, $pageSize: Int!) { business(id: $business_id) { id customers(page: $page, pageSize: $pageSize) { edges { node { id name business { id } firstName lastName email mobile phone fax tollFree website displayId address { addressLine1 addressLine2 city province { code name } country { code } postalCode } currency { code } createdAt modifiedAt overdueAmount { raw value } outstandingAmount { raw value } shippingDetails { name address { addressLine1 addressLine2 city province {name code slug } country { code name currency { code symbol name plural exponent } nameWithArticle provinces { code name } } postalCode } phone instructions } } } } } }",
        "variables": {
          "business_id": "{{@ account_id @}}",
          "page": "{{ headers['X-Sesam-Page'] }}sesam:markjson",
          "pageSize": 200
        }
      },
      "payload_property": "data.business.customers.edges",
      "url": ""
    },
    "customer-lookup": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "query($businessId: ID!, $customerId: ID!) { business(id: $businessId) { id customer(id: $customerId) { id name business { id } firstName lastName email mobile phone fax tollFree website displayId address { addressLine1 addressLine2 city province { code name } country { code } postalCode } currency { code } createdAt modifiedAt overdueAmount { raw value } outstandingAmount { raw value } shippingDetails { name address { addressLine1 addressLine2 city province { name code slug } country { code name currency { code symbol name plural exponent } nameWithArticle provinces { code name } } postalCode } phone instructions } } } }",
        "variables": {
          "businessId": "{{@ account_id @}}",
          "customerId": "{{ entity.id }}"
        }
      },
      "payload_property": "data.business.customer",
      "url": ""
    },
    "customer-update": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "mutation ($input: CustomerPatchInput!) { customerPatch(input: $input) { didSucceed inputErrors { code message path } customer { id } }}",
        "variables": {
          "input": "{{ entity.payload2 | tojson }}sesam:markjson"
        }
      },
      "url": ""
    },
    "invoice-delete": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "mutation($input: InvoiceDeleteInput!) { invoiceDelete(input: $input) { didSucceed inputErrors { message code path } }}",
        "variables": {
          "input": {
            "invoiceId": "{{ entity.id }}"
          }
        }
      },
      "url": ""
    },
    "invoice-insert": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "mutation($input: InvoiceCreateInput!) { invoiceCreate(input: $input) { didSucceed inputErrors { message code path } invoice { id customer { id } items { product { id } } } } }",
        "variables": {
          "input": "{{ entity.payload2 | tojson }}sesam:markjson"
        }
      },
      "payload_property": "data.invoiceCreate.invoice",
      "url": ""
    },
    "invoice-list": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "headers": {
        "X-Sesam-Page": "{% if (previous_request_headers is defined and previous_request_headers['X-Sesam-Page'] is defined) %}{{ [previous_request_headers['X-Sesam-Page']|int + 1, 2] | max }}{% else %}1{% endif %}"
      },
      "id_expression": "{{ node.id }}",
      "method": "POST",
      "payload": {
        "query": "query($business_id: ID!, $page: Int!, $pageSize: Int!) {  business(id: $business_id) { id invoices(page: $page, pageSize: $pageSize) { edges { node {id  business {id} createdAt modifiedAt pdfUrl viewUrl status title subhead invoiceNumber invoiceDate poNumber customer{ id } currency{ code } dueDate amountDue{ value currency{ symbol } } amountPaid{ value currency{ symbol } } taxTotal{ value currency{ symbol } } total{ value currency{ symbol } } exchangeRate footer memo disableCreditCardPayments disableBankPayments itemTitle unitTitle priceTitle amountTitle hideName hideDescription hideUnit hidePrice hideAmount items{ product{ id } description quantity price subtotal{ value currency{ symbol } } total{ value currency{ symbol } } account{ id name subtype{ name value } } taxes{ amount{ value } salesTax{ id name } } } lastSentAt lastSentVia lastViewedAt } } } } }",
        "variables": {
          "business_id": "{{@ account_id @}}",
          "page": "{{ headers['X-Sesam-Page'] }}sesam:markjson",
          "pageSize": 200
        }
      },
      "payload_property": "data.business.invoices.edges",
      "url": ""
    },
    "invoice-lookup": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "query($businessId: ID!, $invoiceId: ID!) { business(id: $businessId) { id invoice(id: $invoiceId) { id business { id } createdAt modifiedAt pdfUrl viewUrl status title subhead invoiceNumber invoiceDate poNumber customer { id } currency { code } dueDate amountDue { value currency { symbol } } amountPaid { value currency { symbol } } taxTotal { value currency { symbol } } total { value currency { symbol } } exchangeRate footer memo disableCreditCardPayments disableBankPayments itemTitle unitTitle priceTitle amountTitle hideName hideDescription hideUnit hidePrice hideAmount items { product { id } description quantity price subtotal { value currency { symbol } } total { value currency { symbol } } account { id name subtype { name value } } taxes { amount { value } salesTax { id name } } } lastSentAt lastSentVia lastViewedAt } } }",
        "variables": {
          "businessId": "{{@ account_id @}}",
          "invoiceId": "{{ entity.id }}"
        }
      },
      "payload_property": "data.business.invoice",
      "url": ""
    },
    "invoice-update": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "mutation($input: InvoicePatchInput!) { invoicePatch(input: $input) { didSucceed invoice { id invoiceNumber } inputErrors { message path code } } }",
        "variables": {
          "input": "{{ entity.payload2 | tojson }}sesam:markjson"
        }
      },
      "url": ""
    },
    "product-delete": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "mutation($input: ProductArchiveInput!) { productArchive(input: $input) { didSucceed inputErrors { message code path } }}",
        "variables": {
          "input": {
            "id": "{{ entity.id }}"
          }
        }
      },
      "url": ""
    },
    "product-insert": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "mutation ($input: ProductCreateInput!) { productCreate(input: $input) { didSucceed inputErrors { code message path } product { id name description unitPrice incomeAccount { id name } expenseAccount { id name } isSold isBought isArchived createdAt modifiedAt } } }",
        "variables": {
          "input": "{{ entity.payload2 | tojson }}sesam:markjson"
        }
      },
      "payload_property": "data.productCreate.product",
      "url": ""
    },
    "product-list": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "headers": {
        "X-Sesam-Page": "{% if (previous_request_headers is defined and previous_request_headers['X-Sesam-Page'] is defined) %}{{ [previous_request_headers['X-Sesam-Page']|int + 1, 2] | max }}{% else %}1{% endif %}"
      },
      "id_expression": "{{ node.id }}",
      "method": "POST",
      "payload": {
        "query": "query($business_id: ID!, $page: Int!, $pageSize: Int!) { business(id: $business_id) { id products(page: $page, pageSize: $pageSize) { edges { node { business {id} incomeAccount {id} expenseAccount {id} defaultSalesTaxes {id} id internalId name description unitPrice isSold isBought isArchived createdAt modifiedAt } } } } }",
        "variables": {
          "business_id": "{{@ account_id @}}",
          "page": "{{ headers['X-Sesam-Page'] }}sesam:markjson",
          "pageSize": 200
        }
      },
      "payload_property": "data.business.products.edges",
      "url": ""
    },
    "product-lookup": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "query($businessId: ID!, $productId: ID!) { business(id: $businessId) { id product(id: $productId) { business { id } incomeAccount { id } expenseAccount { id } defaultSalesTaxes { id } id internalId name description unitPrice isSold isBought isArchived createdAt modifiedAt } } }",
        "variables": {
          "businessId": "{{@ account_id @}}",
          "productId": "{{ entity.id }}"
        }
      },
      "payload_property": "data.business.product",
      "url": ""
    },
    "product-update": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "mutation($input: ProductPatchInput!) { productPatch(input: $input) { didSucceed product { id } } }",
        "variables": {
          "input": "{{ entity.payload2 | tojson }}sesam:markjson"
        }
      },
      "url": ""
    },
    "salestax-delete": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "mutation($input: SalesTaxArchiveInput!) { salesTaxArchive(input: $input) { didSucceed inputErrors { code message path } } }",
        "variables": {
          "input": {
            "id": "{{ entity.id }}"
          }
        }
      },
      "url": ""
    },
    "salestax-insert": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "mutation($input: SalesTaxCreateInput!) { salesTaxCreate(input: $input) { didSucceed inputErrors { code message path } salesTax { id name description abbreviation taxNumber showTaxNumberOnInvoices rates { effective rate } } } }",
        "variables": {
          "input": "{{ entity.payload2 | tojson }}sesam:markjson"
        }
      },
      "payload_property": "data.salesTaxCreate.salesTax",
      "url": ""
    },
    "salestax-list": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "headers": {
        "X-Sesam-Page": "{% if (previous_request_headers is defined and previous_request_headers['X-Sesam-Page'] is defined) %}{{ [previous_request_headers['X-Sesam-Page']|int + 1, 2] | max }}{% else %}1{% endif %}"
      },
      "id_expression": "{{ node.id }}",
      "method": "POST",
      "payload": {
        "query": "query($business_id: ID!, $page: Int!, $pageSize: Int!) { business(id: $business_id) { id salesTaxes(page: $page, pageSize: $pageSize) { edges { node { id name abbreviation description taxNumber showTaxNumberOnInvoices rate rates { effective rate } isCompound isRecoverable isArchived createdAt modifiedAt } } } } }",
        "variables": {
          "business_id": "{{@ account_id @}}",
          "page": "{{ headers['X-Sesam-Page'] }}sesam:markjson",
          "pageSize": 2
        }
      },
      "payload_property": "data.business.salesTaxes.edges",
      "url": ""
    },
    "salestax-lookup": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "query($businessId: ID!, $salesTaxId: ID!) { business(id: $businessId) { id salesTax(id: $salesTaxId) { id name abbreviation description taxNumber showTaxNumberOnInvoices rate rates { effective rate } isCompound isRecoverable isArchived createdAt modifiedAt } } }",
        "variables": {
          "businessId": "{{@ account_id @}}",
          "salesTaxId": "{{ entity.id }}"
        }
      },
      "payload_property": "data.business.salesTax",
      "url": ""
    },
    "salestax-update": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "method": "POST",
      "payload": {
        "query": "mutation($input: SalesTaxPatchInput!) { salesTaxPatch(input: $input) { didSucceed salesTax { id } } }",
        "variables": {
          "input": "{{ entity.payload2 | tojson }}sesam:markjson"
        }
      },
      "url": ""
    },
    "vendor-list": {
      "error_expression": "{{ body.errors | tojson if body is defined and body.errors is defined else '' }}",
      "headers": {
        "X-Sesam-Page": "{% if (previous_request_headers is defined and previous_request_headers['X-Sesam-Page'] is defined) %}{{ [previous_request_headers['X-Sesam-Page']|int + 1, 2] | max }}{% else %}1{% endif %}"
      },
      "id_expression": "{{ node.id }}",
      "method": "POST",
      "payload": {
        "query": "query($business_id: ID!, $page: Int!, $pageSize: Int!) {  business(id: $business_id) { id vendors(page: $page, pageSize: $pageSize) { edges { node {id name address { addressLine1 addressLine2 city province { code name } country { code  } postalCode } firstName lastName displayId email mobile phone fax tollFree website internalNotes currency { code } createdAt modifiedAt isArchived } } } } }",
        "variables": {
          "business_id": "{{@ account_id @}}",
          "page": "{{ headers['X-Sesam-Page'] }}sesam:markjson",
          "pageSize": 200
        }
      },
      "payload_property": "data.business.vendors.edges",
      "url": ""
    }
  },
  "type": "system:rest",
  "url_pattern": "https://gql.waveapps.com/graphql/public%s",
  "verify_ssl": true
}